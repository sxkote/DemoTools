// <auto-generated />
using System;
using DemoTools.Modules.Main.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DemoTools.Modules.Main.Infrastructure.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20210402080026_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.AuthToken", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("Expire")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.ToTable("AuthToken");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Persons.Person", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PersonID");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Cellular")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.HasKey("ID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Persons.TypeUserPermission", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("UserPermissionID");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("TypesUserPermission");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Persons.TypeUserRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("UserRoleID");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("TypesUserRole");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Persons.TypeUserRolePermission", b =>
                {
                    b.Property<Guid>("UserRoleID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserPermissionID")
                        .HasColumnType("uuid");

                    b.HasKey("UserRoleID", "UserPermissionID");

                    b.HasIndex("UserPermissionID");

                    b.ToTable("TypesUserRolePermission");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Persons.User", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uuid")
                        .HasColumnName("UserID");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Persons.UserRole", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserRoleID")
                        .HasColumnType("uuid");

                    b.HasKey("UserID", "UserRoleID");

                    b.HasIndex("UserRoleID");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Todo.TodoItem", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uuid")
                        .HasColumnName("TodoItemID");

                    b.Property<Guid>("TodoListID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ID", "TodoListID");

                    b.HasIndex("TodoListID");

                    b.ToTable("TodoItem");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Todo.TodoList", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("TodoListID");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("TodoList");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Persons.Person", b =>
                {
                    b.OwnsOne("SX.Common.Shared.Models.PersonFullName", "Name", b1 =>
                        {
                            b1.Property<Guid>("PersonID")
                                .HasColumnType("uuid");

                            b1.Property<string>("First")
                                .HasColumnType("text")
                                .HasColumnName("NameFirst");

                            b1.Property<string>("Last")
                                .HasColumnType("text")
                                .HasColumnName("NameLast");

                            b1.Property<string>("Second")
                                .HasColumnType("text")
                                .HasColumnName("NameSecond");

                            b1.HasKey("PersonID");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("PersonID");
                        });

                    b.Navigation("Name");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Persons.TypeUserRolePermission", b =>
                {
                    b.HasOne("DemoTools.Modules.Main.Domain.Entities.Persons.TypeUserPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("UserPermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoTools.Modules.Main.Domain.Entities.Persons.TypeUserRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("UserRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Persons.User", b =>
                {
                    b.HasOne("DemoTools.Modules.Main.Domain.Entities.Persons.Person", null)
                        .WithOne("User")
                        .HasForeignKey("DemoTools.Modules.Main.Domain.Entities.Persons.User", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Persons.UserRole", b =>
                {
                    b.HasOne("DemoTools.Modules.Main.Domain.Entities.Persons.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DemoTools.Modules.Main.Domain.Entities.Persons.TypeUserRole", "Role")
                        .WithMany()
                        .HasForeignKey("UserRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Todo.TodoItem", b =>
                {
                    b.HasOne("DemoTools.Modules.Main.Domain.Entities.Todo.TodoList", null)
                        .WithMany("Items")
                        .HasForeignKey("TodoListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Persons.Person", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Persons.TypeUserRole", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Persons.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DemoTools.Modules.Main.Domain.Entities.Todo.TodoList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
